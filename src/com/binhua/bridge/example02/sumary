发送提示消息:
消息又分成普通消息、加急消息和特急消息多种，不同的消息类型，业务功能处理是不一样的，
比如加急消息是在消息上添加加急,加急消息会提供监控的方法，而特急消息除了添加特急外，还会做一条催促的记录，多久不完成会继续催促；
从发送消息的手段上看，又有系统内短消息、手机短信息、邮件等。

不使用桥梁模式来解决问题:
1.消息只是实现发送普通消息，发送的方式只实现系统内短消息和邮件
2.加急消息需要扩展出一个新的接口，除了基本的发送消息的功能，还需要添加监控功能,同样有sms和email
3.对于特急消息，在普通消息的处理基础上，需要添加催促的功能，同样有sms和email
此时会发现一个很明显的问题，那就是通过这种继承的方式来扩展消息处理，会非常不方便。
实现加急消息处理的时候，必须实现系统内短消息和邮件两种处理方式，因为业务处理可能不同，在实现特急消息处理的时候，又必须实现系统内短信息和邮件两种处理方式。
这意味着，以后每次扩展一下消息处理，都必须要实现这两种处理方式。
另外如果要添加一种新的发送消息的方式，比如手机，是需要在每一种抽象的具体实现中，都添加发送手机消息的处理的


使用桥梁模式来解决问题
根据业务的功能要求，业务的变化具有两个维度，
一个维度是抽象的消息，包括普通消息、加急消息和特急消息，这几个抽象的消息本身就具有一定的关系，加急消息和特急消息会扩展普通消息；
另一个维度是在具体的消息发送方式上，包括系统内短消息、邮件和手机短消息，这几个方式是平等的，可被切换的方式。
消息的抽象和实现是混杂在一起的，这就导致了一个纬度的变化会引起另一个纬度进行相应的变化，从而使用普通的继承方式会导致程序扩展起来非常困难;

想解决这个问题，就必须把这两个纬度分开，也就是将抽象部分和实现部分分开，让它们相互独立，这样就可以实现独立的变化，使扩展变得简单。
抽象部分就是各个消息的类型所对应的功能，而实现部分就是各种发送消息的方式。
按照桥梁模式的结构，给抽象部分和实现部分分别定义接口，然后分别实现它们就可以了。
采用桥梁模式来实现，抽象部分和实现部分分离开了，可以相互独立的变化，而不会相互影响。
因此在抽象部分添加新的消息处理（特急消息），对发送消息的实现部分是没有影响的；
反过来增加发送消息的方式（手机短消息），对消息处理部分也是没有影响的。


