建造模式是对象的创建模式。
建造模式可以将一个产品的内部表象（internal representation）与产品的生产过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。
产品的内部表象:一个产品常有不同的组成成分作为产品的零件，这些零件有可能是对象，也有可能不是对象，它们通常又叫做产品的内部表象（internal representation）
使用建造模式可以使客户端不需要知道所生成的产品有哪些零件，每个产品的对应零件彼此有何不同，是怎么建造出来的，以及怎么组成产品。

对象性质的建造：对象会有不同的性质，比如下面这两条
1.一个对象会有一些重要的性质，在它们没有恰当的值之前，对象不能作为一个完整的产品使用；比如邮件的发送地址
2.一个对象的一些性质必须按照某个顺序赋值才有意义
由于建造零件的过程很复杂，因此，这些零件的建造过程往往被“外部化”到另一个称做建造者的对象里，建造者对象返还给客户端的是一个全部零件都建造完毕的产品对象。

建造模式利用一个导演者对象和具体建造者对象一个个地建造出所有的零件，从而建造出完整的产品对象。
建造者模式将产品的结构和产品的零件的建造过程对客户端隐藏起来，把对建造过程进行指挥的责任和具体建造者零件的责任分割开来，达到责任划分和封装的目的。　

建造者角色：
抽象建造者（Builder）角色：给出一个抽象接口，以规范产品对象的各个组成成分的建造
具体建造者（ConcreteBuilder）角色：与应用程序紧密相关的一些类，它们在应用程序调用下创建产品的实例。
                                这个角色要完成的任务包括：
                                1.实现抽象建造者Builder所声明的接口（一般是建造方法和返还结构方法），给出一步一步地完成创建产品实例的操作。
                                2.在建造过程完成后，提供产品的实例。
导演者（Director）角色：调用具体建造者角色以创建产品对象；
                      导演者角色并没有产品类的具体知识，真正拥有产品类的具体知识的是具体建造者角色
产品（Product）角色：建造中的复杂对象；（这些产品类并不一定有共同的接口，而完全可以是不相关联的）
导演者角色是与客户端打交道的角色。导演者将客户端创建产品的请求划分为对各个零件的建造请求，再将这些请求委派给具体建造者角色。
具体建造者角色是做具体建造工作的，但是却不为客户端所知。
一般来说，每有一个产品类，就有一个相应的具体建造者类。
这些产品应当有一样数目的零件，而每有一个零件就相应地在所有的建造者角色里有一个建造方法。
