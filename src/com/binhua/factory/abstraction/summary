每一个模式都是针对一定问题的解决方案。
抽象工厂模式与工厂方法模式的最大区别就在于：
工厂方法模式针对的是一个产品等级结构；
而抽象工厂模式则需要面对多个产品等级结构。
抽象工厂模式是对象的创建模式，它是工厂方法模式的进一步推广

【产品族】:是指位于不同产品等级结构中，功能相关联的产品组成的家族。
比如AMD的主板、芯片组、CPU组成一个家族，Intel的主板、芯片组、CPU组成一个家族
这两个家族都来自于三个【产品等级】：主板、芯片组、CPU

工厂方法模式是对产品等级（最好是一个）建立工厂，如果有多个产品等级，会导致管理混乱工厂随着产品等级增加变多，
如unexample中主板和cpu不配套
抽象工厂是对产品族建立工厂，如example；
更具体可以说，工厂方法是一维的，抽象工厂是多维的

抽象工厂的功能是为一系列相关对象或相互依赖的对象创建一个接口。
一定要注意，这个接口内的方法不是任意堆砌的，而是一系列相关或相互依赖的方法。
这些产品对象就构成了一个产品族，也就是抽象工厂定义了一个产品族
比如上面例子中的主板和CPU，都是为了组装一台电脑的相关对象。不同的装机方案，代表一种具体的电脑系列。

抽象工厂模式的优点
分离接口和实现：
客户端使用抽象工厂来创建需要的对象，而客户端根本就不知道具体的实现是谁，客户端只是面向产品的接口编程而已。
也就是说，客户端从具体的产品实现中解耦。
使切换产品族变得容易：
因为一个具体的工厂实现代表的是一个产品族，比如上面例子的从Intel系列到AMD系列只需要切换一下具体工厂。

抽象工厂模式的缺点
不太容易扩展新的产品：
如果需要给整个产品族添加一个新的产品，那么就需要修改抽象工厂，这样就会导致修改所有的工厂实现类。

