实例：一个购物网站；对所有的高级会员提供每本20%的促销折扣；对中级会员提供每本10%的促销折扣；对初级会员没有折扣
根据描述，折扣是根据以下的几个算法中的一个进行的：
　　算法一：对初级会员没有折扣。
　　算法二：对中级会员提供10%的促销折扣。
　　算法三：对高级会员提供20%的促销折扣。

从本例中可以看出，策略模式仅仅封装算法，提供新的算法插入到已有系统中，以及老算法从系统中“退休”的方法，
策略模式并不决定在何时使用何种算法。在什么情况下使用什么算法是由客户端决定的


策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性

策略模式一个很大的特点就是各个策略算法的平等性。
对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，才能实现算法之间可以相互替换。
所有的策略算法在实现上也是相互独立的，相互之间是没有依赖的。可以这样描述这一系列策略算法：策略算法是相同行为的不同实现。

运行期间，策略模式在每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略实现中切换，但是同时只能使用一个。

所有的具体策略类都有一些公有的行为，应当把这些公有的行为放到共同的抽象策略角色Strategy类里面