类级内部类：
1）类级内部类指的是，有static修饰的成员式内部类。如果没有static修饰的成员式内部类称为对象级内部类。
2）类级内部类相当于外部类的static成分，它的对象与外部类对象间不存在依赖关系，因此可直接创建。
  而对象级内部类的实例，是绑定在外部对象实例中的。
3）类级内部类中，可定义静态的方法。在静态方法中只能够引用外部类中的静态成员方法或者静态成员变量。
4）类级内部类相当于外部类的成员，只有在第一次被使用的时候才会被装载。


多线程默认的同步锁机制：
1）由静态初始化器（在静态字段上或者static{}块中的初始化器）初始化数据时；
2）访问final字段时：被final修饰的字段在构造器中一旦被初始化完成，并且构造器没有把this引用传递进去，那么在其他线程中就能看见final字段的值，无需同步就可以被其他线程正确访问。
3）在创建线程之前创建对象时；
4）线程可以看见它将要处理的对象时。

采用类级内部类，在这个类级内部类里面去创建对象实例（JVM来保证线程安全）。
这样一来，只要不使用到这个类级内部类，那就不会创建对象实例，从而同时实现延迟加载和线程安全。

当getInstance方法第一次被调用的时候，它第一次读取SingletonHolder.instance，导致SingletonHolder类得到初始化；
而这个类在装载并被初始化的时候，会初始化它的静态域，从而创建Singleton的实例，
由于是静态的域，因此只会在虚拟机装载类的时候初始化一次，并由虚拟机来保证它的线程安全性。
这个模式的优势在于，getInstance方法并没有被同步，并且只是执行一个域的访问，因此延迟初始化并没有增加任何访问成本。